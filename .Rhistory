install.packages("KernSmooth")
library(KernSmooth)
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(z){
x <<- z
inver <<- NULL
}
get <- function() x
setinvert <- function() inver <<- solve
getinvert <- function() inver
list(set = set, get = get, setinvert = setinvert, getinvert = getinvert)
}
View(makeCacheMatrix)
m <- matrix(1:4,2,2)
m
a <- makeCacheMatrix(m)
b <-cacheSolve(m)
b <-cacheSolve(m)
cacheSolve <- function(x, ...) {
inver <- x$getinvert()
if(!is.null(inver)){
message("getting cached inverse")
return(inver)
}
data <- x$get
inver <- solve(data,...)
x$setinvert(inver)
inver
## Return a matrix that is the inverse of 'x'
}
b <- cacheSolve(m)
a
b <- cacheSolve(m)
cacheSolve <- function(x, ...) {
inver <- x$getinvert()
if(!is.null(inver)){
message("getting cached inverse")
return(inver)
}
data <- x$get
inver <- solve(data,...)
x$setinvert(inver)
inver
## Return a matrix that is the inverse of 'x'
}
b <- cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(z){
x <<- z
inver <<- NULL
}
get <- function() x
setinvert <- function() inver <<- solve
getinvert <- function() inver
list(set = set, get = get, setinvert = setinvert, getinvert = getinvert)
}
b <- cacheSolve(m)
list(set = set, get = get, setinvert = setinvert, getinvert = getinvert)
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(z){
x <<- z
inver <<- NULL
}
get <- function() x
setinvert <- function(solve) inver <<- solve
getinvert <- function() inver
list(set = set, get = get, setinvert = setinvert, getinvert = getinvert)
}
a <- makeCacheMatrix(matrix(1:4,2,2))
b <- cacheSolve(a)
swirl()
library(swirl)
swirl()
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
0
library(swirl)
swirl()
qplot(displ,hwy,data = mpg, color = drv)
qplot(displ,hwy,data = mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy,data = mpg, color = drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data = mpg, facets = drv ~.)
qplot(hwy,data = mpg, facets = drv ~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
g <- ggplot(mpg,aes(displ,hwy))
g
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink",size=4,alpha=.5)
g + geom_point(size=4,alpha=.5,aes(color=drv))
g + geom_point(color=drv) + labs(title="Swirl Rules!") + labs(x = "Displacement",y = "Hwy Mileage")
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x = "Displacement",y = "Hwy Mileage")
g + geom_point(size=2,alpha=.5,aes(color=drv)) + geom_smooth(size=4,linetype=e,method = "lm",se=FALSE)
g + geom_point(size=2,alpha=.5,aes(color=drv)) + geom_smooth(size=4,linetype=3,method = "lm",se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx,myy,type = "l",ylim = c(-3,3))
g <- ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point()+facet_grid((drv~cyl,margins=TRUE)
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(size=2,color="black",method="lm",se=FALSE)
g + geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(size=2,color="black",method="lm",se=FALSE)+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
qplot(price,data = diamonds)
range(diamonds$price)
qplot(price,data = diamonds,binwidth=18497/30)
brk
counts
qplot(price,data = diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom = "density")
qplot(price,data=diamonds,geom = "density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth(method="lm"))
qplot(carat,price,data=diamonds,color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets = .~cut())+geom_smooth(method="lm")
qplot(carat,price,data=diamonds,color=cut,facets = .~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds,aes(depth,price)
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=4,col="red")
abline(h=.4,col="red")
5
abline(h=.05,col="red")
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local = TRUE)
heatmap(dataMatrix)
u     V-0
mat
svd(mat)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,c(1,2)]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[1:2]%*%svd1$d[1:2]%*%t(svd1$v[1:2])
a2 <- svd1$u[1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[1:2])
a2 <- svd1$u[,1:2]%*%svd1$d[1:2]%*%t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diad(svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,c(-1,-2)])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject=1)
sub1 <- subset(ssd,subject==1)
sub1
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v)
maxCon<-which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],maxCon)
mdist <- dist(c(sub1[,10:12],maxCon))
skip
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
play
play()
maxCon
nxt()
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],centers = 6)
table(kClust$cluster,sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)],centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames,"|",fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]],[wcol])
names(pm1) <- make.names(cnames[[1]],[wcol]))
names(pm1) <- make.names(cnames[[1]][wcol]))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],"month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code==36&county.site %in% both)
cnt1 <- subset(pm1,State.Code==36&county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0,County.Code==63&Site.ID==2008)
pm1sub <- subset(cnt1,County.Code==63&Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date,"%Y%m%d"))
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm = ),lwd=2)
abline(h=median(x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm = TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm = TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0,d1,by="state")
play()
mn0
d1
names(mn1)
nxt()
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2]),range(xlim=c(.5,2.5)))
with(mrg,plot(rep(1,52),mrg[,2]),xlim=c(.5,2.5)))
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
setwd("~/Documents/Studying/Rcourse/RepData_PeerAssessment1/RepData_PeerAssessment1")
knit("PA1_template.Rmd")
library("knitr")
knit("PA1_template.Rmd")
